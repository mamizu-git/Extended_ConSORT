sum(n, p) 
[ <#n: int, p: int ref> -> 
  <#n: int, p: int ref | int> ]
{
  if n <= 0 then {
    0
  } else {
    let x = *p in
    if n = 1 then {
      x
    } else {
      let k = n - 1 in
      let q = p + k in
      let x2 = *q in
      let y = x + x2 in
      let m = n - 2 in
      let p1 = p + 1 in
      let s = sum(m, p1) in
      let z = y + s in
      z
    } 
  }
}

abs(m)
[ <#m: int> -> <#m: int | int> ]
{
  if m >= 0 then {
    m
  } else {
    let k = -m in
    k
  }
}

init_x(n, x, p) 
[ <#n: int, x: int, p: int ref> -> 
  <#n: int, x: int, p: int ref | int> ]
{
  if n <= 0 then {
    1
  } else {
    p := x;
    let q = p + 1 in
    let m = n - 1 in
    let d = init_x(m, x, q) in
    alias(q = p + 1);
    1
  }
}

{
  let p = mkarray 1000 in
  let m = 1000 in
  let rand = _ in
  let z = abs(rand) in
  let d = init_x(m, z, p) in
  let x = sum(m, p) in
  assert(x >= 0);
  ()
}
